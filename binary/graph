#!/usr/bin/env python

### Plot results
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import matplotlib.ticker as ticker
import os, sys
import math

benchmarks = ['DotProduct', 'OuterProduct', 'GEMM', 'TPCHQ6', 'BlackScholes', 'GDA', 'Kmeans']
labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
plotInvalid = True

numCols = 1
numRows = len(benchmarks)/numCols
fig, axes = plt.subplots(len(benchmarks)/numCols, numCols*3, sharex='col', sharey='row')
fig.subplots_adjust(wspace=0.12)
fig.subplots_adjust(hspace=0.1)
font_size = 8
marker_iv = '.'
marker_v = '.'
marker_pd = '*'
marker_comp = '*'
color_iv = '#A9A9A9'
color_spd = '#006600'
color_mpd = '#33CC33'
color_seq = '#FFA500'
color_met = '#1E90FF'
color_comp = 'r'
dotSize = 20
compSize = 50
ano_loc = (0.9, 0.85)

for (idx, bm) in enumerate(benchmarks):
  f = open('./data/' + bm + 'Compiler.csv')
  s = f.read()
  f.close()
  lines = s.split('\n')
  header = lines[0].split(',')

  ALMS = 0
  for i in range(0, len(header)):
    if 'ALMS' in header[i]: ALMS = i

  REGS = ALMS + 1
  DSPS = ALMS + 2
  BRAM = ALMS + 3
  CYCL = ALMS + 4
  VALID = ALMS + 5
  PARET = ALMS + 6
  SYNTH = ALMS + 7

  almSets = [[],[],[],[]]
  dspSets = [[],[],[],[]]
  brmSets = [[],[],[],[]]
  cycSets = [[],[],[],[]]

  for i in range(1,len(lines)-1):
    maxBRAM = 2567
    if idx == 2: maxBRAM = 1860
    ln = lines[i].split(',')
    alm = 100 * float(ln[ALMS].rstrip()) / 262400
    dsp = 100 * float(ln[DSPS].rstrip()) / 1963
    brm = 100 * float(ln[BRAM].rstrip()) / maxBRAM
    cyc = math.log10(float(ln[CYCL].rstrip()))

    g = 0
    if 'true' in ln[VALID]: g = 1
    if 'true' in ln[PARET]: g = 2
    if 'true' in ln[SYNTH]: g = 3
    almSets[g].append(alm)
    dspSets[g].append(dsp)
    brmSets[g].append(brm)
    cycSets[g].append(cyc)


  #### Start plotting
  rowIdx = idx%numRows
  colIdx = (idx-rowIdx)/numRows
  ax1 = axes[rowIdx][colIdx*3+0]
  ax2 = axes[rowIdx][colIdx*3+1]
  ax3 = axes[rowIdx][colIdx*3+2]

  ####### ALMs
  #ax.set_title("{0} Performance/Area Tradeoff (ALMs)".format(sys.argv[1]))
  # Add some axis labels.
  if (rowIdx==(numRows-1)):
    ax1.set_xlabel("ALM", fontsize=font_size)
  ax1.set_ylabel(bm, fontsize=font_size)
  ax1.tick_params(axis='both', which='major', labelsize=font_size)
  ax1.get_yaxis().set_major_locator(ticker.MaxNLocator(integer=True))

  if plotInvalid:
    iv = ax1.scatter(almSets[0], cycSets[0], c = color_iv, s = dotSize, marker = marker_iv, edgecolors='none', label = 'Invalid')

  v =  ax1.scatter(almSets[1], cycSets[1], c = color_seq, s = dotSize, marker = marker_v, edgecolors='none', label = 'Valid', alpha = 0.3)
  p = ax1.scatter(almSets[2], cycSets[2], c = color_mpd, s = dotSize, marker = marker_pd, edgecolors=color_mpd, label = 'Pareto Frontier')
  s = ax1.scatter(almSets[3], cycSets[3], c = color_comp, s=compSize, marker = marker_comp, label = 'Compared Design')
  iv.set_rasterized(True)
  v.set_rasterized(True)
  p.set_rasterized(True)
  s.set_rasterized(True)

  ax1.grid()
  ax1.set_xlim([-1,120])
  ax1.annotate(chr(65+idx*3+0), ano_loc, fontsize=font_size, xycoords='axes fraction',  ha='center', va='center', weight='bold')

  ######### DSPs
  #ax.set_title("{0} Performance/Area Tradeoff (DSPs)".format(sys.argv[1]))
  if (rowIdx==(numRows-1)):
    ax2.set_xlabel("DSP", fontsize=font_size)
  ax2.tick_params(axis='both', which='major', labelsize=font_size)
  ax2.get_yaxis().set_major_locator(ticker.MaxNLocator(integer=True))

  if plotInvalid:
    iv = ax2.scatter(dspSets[0], cycSets[0], c = color_iv, s = dotSize, marker = marker_iv, edgecolors='none', label = 'Invalid')

  v = ax2.scatter(dspSets[1], cycSets[1], c = color_seq, s = dotSize, marker = marker_v, edgecolors='none', label = 'Valid', alpha = 0.3)
  p = ax2.scatter(dspSets[2], cycSets[2], c = color_mpd, s = dotSize, marker = marker_pd, edgecolors=color_mpd, label = 'Pareto Frontier')
  s = ax2.scatter(dspSets[3], cycSets[3], c = color_comp, s=compSize, marker = marker_comp, label = 'Compared Design')
  iv.set_rasterized(True)
  v.set_rasterized(True)
  p.set_rasterized(True)
  s.set_rasterized(True)

  #plt.legend([m, mp], ['Metapipeline', 'Metapipeline + Pareto'])
  ax2.grid()
  ax2.set_xlim([-1,120])
  ax2.annotate(chr(65+idx*3+1), ano_loc, fontsize=font_size, xycoords='axes fraction',  ha='center', va='center', weight='bold')

  ######## BRAM
  #ax.set_title("{0} Performance/Area Tradeoff (BRAMs)".format(sys.argv[1]))
  if (rowIdx==(numRows-1)):
    ax3.set_xlabel("BRAM", fontsize=font_size)
  ax3.tick_params(axis='both', which='major', labelsize=font_size)
  ax3.get_yaxis().set_major_locator(ticker.MaxNLocator(integer=True))

  if plotInvalid:
    iv = ax3.scatter(brmSets[0], cycSets[0], c = color_iv, s = dotSize, marker = marker_iv, edgecolors='none', label = 'Invalid')

  v = ax3.scatter(brmSets[1], cycSets[1], c = color_seq, s = dotSize, marker = marker_v, edgecolors='none', label = 'Valid', alpha = 0.3)
  p = ax3.scatter(brmSets[2], cycSets[2], c = color_mpd, s = dotSize, marker = marker_pd, edgecolors=color_mpd, label = 'Pareto Frontier')
  s = ax3.scatter(brmSets[3], cycSets[3], c = color_comp, s=compSize, marker = marker_comp, label = 'Compared Design')
  iv.set_rasterized(True)
  v.set_rasterized(True)
  p.set_rasterized(True)
  s.set_rasterized(True)

  ax3.grid()
  ax3.set_xlim([-1,120])
  ax3.tick_params(axis='x', which='major', labelsize=font_size-1)
  ax3.annotate(chr(65+idx*3+2), ano_loc, fontsize=font_size, xycoords='axes fraction',  ha='center',
      va='center', weight='bold')

  if (rowIdx==0):
    ax3.legend([iv, v, p, s], ['Invalid design',
    'Valid design',
      'Pareto point',
      'Synthesized design'],
        bbox_to_anchor=(1.0, 1.6), ncol=2, fontsize=font_size+1)

fig.text(0.5, 0.04, 'Usage (% of maximum)', ha='center')
fig.text(0.04, 0.5, 'Cycles (Log Scale)', va='center', rotation='vertical')
fig.set_size_inches(7,9)
plt.savefig('tradeoff.pdf', format='pdf', dpi=900)


